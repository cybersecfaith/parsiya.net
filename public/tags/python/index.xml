<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Parsia&#39;s Den</title>
    <link>http://parsiya.net/tags/python/</link>
    <description>Recent content in Python on Parsia&#39;s Den</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Oct 2015 21:42:10 +0000</lastBuildDate>
    <atom:link href="http://parsiya.net/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Proxying Hipchat Part 3: SSL Added and Removed Here :^)</title>
      <link>http://parsiya.net/blog/2015-10-19-proxying-hipchat-part-3-ssl-added-and-removed-here/</link>
      <pubDate>Mon, 19 Oct 2015 21:42:10 +0000</pubDate>
      
      <guid>http://parsiya.net/blog/2015-10-19-proxying-hipchat-part-3-ssl-added-and-removed-here/</guid>
      <description>

&lt;p&gt;Finally we are at part 3 of proxying Hipchat. This has been quite the adventure. In &lt;a href=&#34;http://parsiya.net/blog/2015-10-08-proxying-hipchat-part-1-where-did-the-traffic-go/&#34; title=&#34;Proxying Hipchat Part 1: Where did the Traffic Go?&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;part1&lt;/strong&gt;&lt;/a&gt; we identified the endpoints. In &lt;a href=&#34;http://parsiya.net/blog/2015-10-09-proxying-hipchat-part-2-so-you-think-you-can-use-burp/&#34; title=&#34;Proxying Hipchat Part 2: So You Think You Can Use Burp?&#34; target=&#34;_blank&#34;&gt;&lt;strong&gt;part2&lt;/strong&gt;&lt;/a&gt; we answered the question “So you think you can use Burp” with yes and proxied some of Hipchat’s traffic with Burp.&lt;/p&gt;

&lt;p&gt;In this part we will talk about developing our own proxy in Python to view Hipchat’s traffic to/form &lt;code&gt;hipchatserver.com&lt;/code&gt; (which our example Hipchat server). First we are going to discuss how proxies work and we will get over Burp breaking our heart by creating our own proxy in Python to observe and dump the traffic in plaintext.&lt;/p&gt;

&lt;p&gt;Related (crappy) code is at: &lt;a href=&#34;https://bitbucket.org/parsiya/hipchat-proxy/src/&#34; target=&#34;_blank&#34;&gt;https://bitbucket.org/parsiya/hipchat-proxy/src/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For a similar effort (although with a much more complex proxy in &lt;code&gt;erlang&lt;/code&gt;) look at this post: &lt;a href=&#34;http://blog.silentsignal.eu/2015/10/02/proxying-nonstandard-https-traffic/&#34; target=&#34;_blank&#34;&gt;http://blog.silentsignal.eu/2015/10/02/proxying-nonstandard-https-traffic/&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;1-breaking-atlassian-s-eula:6f44788618f3174bd28bf25248bb8608&#34;&gt;-1 Breaking Atlassian’s EULA&lt;/h3&gt;

&lt;p&gt;Go to your Hipchat server&amp;rsquo;s web interface login page and view that page’s source. The same thing appears in &lt;a href=&#34;http://downloads.hipchat.com&#34; target=&#34;_blank&#34;&gt;http://downloads.hipchat.com&lt;/a&gt;.&lt;/p&gt;









&lt;span class=&#34;caption-wrapper&#34;&gt;
  &lt;img class=&#34;caption&#34; src=&#34;http://parsiya.net/images/2015/hipchat3/00-hipchatlogin-source-code.png&#34; title=&#34;Reverse engineering intensifies&#34; alt=&#34;Reverse engineering intensifies&#34;&gt;
  &lt;span class=&#34;caption-text&#34;&gt;Reverse engineering intensifies&lt;/span&gt;
&lt;/span&gt;


&lt;p&gt;Oops we just broke someone’s EULA. Note to people from the future: This is &lt;del&gt;a fresh&lt;/del&gt; an already stale Oracle meme (at the time of writing). For more information read an archived version of the article. &lt;a href=&#34;https://archive.is/xmtoW#selection-283.0-287.757&#34; target=&#34;_blank&#34;&gt;https://archive.is/xmtoW#selection-283.0-287.757&lt;/a&gt; (you can link selected text in archived web pages, what a time to be alive).&lt;/p&gt;

&lt;h3 id=&#34;0-ingredients:6f44788618f3174bd28bf25248bb8608&#34;&gt;0. Ingredients&lt;/h3&gt;

&lt;p&gt;I am going to continue where we left last time. I assume you have proxied Hipchat with Burp and have a general idea of what is happening here.
We will need Python. I am writing my code in 2.7.x because why not? But it should be easily portable to 3.x if not as it is. There are no dependencies as we will only use two standard libraries &lt;code&gt;socket&lt;/code&gt; and &lt;code&gt;ssl&lt;/code&gt;.
We will also need &lt;code&gt;OpenSSL&lt;/code&gt; or another way to create a Certificate Authority (CA) and a signed TLS certificate for &lt;code&gt;hipchatserver.com&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;1-hipchat-update:6f44788618f3174bd28bf25248bb8608&#34;&gt;1. Hipchat Update&lt;/h3&gt;

&lt;p&gt;Since last part, Hipchat has been update to version &lt;strong&gt;2.2.1395&lt;/strong&gt;. If we start Hipchat, we can see one extra request in Burp as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;https://www.hipchat.com/release_notes/client_embed/qtwindows?version_num=1388
.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;1388&lt;/code&gt; is our current version number before update. This request retrieves the patch notes for all released versions after &lt;code&gt;1388&lt;/code&gt; which is basically an HTML page (with some JavaScript in the header that will not be executed as we have seen before).&lt;/p&gt;









&lt;span class=&#34;caption-wrapper&#34;&gt;
  &lt;img class=&#34;caption&#34; src=&#34;http://parsiya.net/images/2015/hipchat3/01-New-Request.png&#34; title=&#34;Request to retrieve patch notes&#34; alt=&#34;Request to retrieve patch notes&#34;&gt;
  &lt;span class=&#34;caption-text&#34;&gt;Request to retrieve patch notes&lt;/span&gt;
&lt;/span&gt;


&lt;p&gt;Let’s update and see what happens. The application sends a GET request to retrieve the new installer from &lt;code&gt;https://s3.amazonaws.com/downloads.hipchat.com/windows/HipChat-2.2.1395-win32.msi&lt;/code&gt;, and then executes it. After logging in we can see that the requests logged in Burp have not changed from last update.&lt;/p&gt;









&lt;span class=&#34;caption-wrapper&#34;&gt;
  &lt;img class=&#34;caption&#34; src=&#34;http://parsiya.net/images/2015/hipchat3/02-Patch-Notes.png&#34; title=&#34;Patch notes in Hipchat&#34; alt=&#34;Patch notes in Hipchat&#34;&gt;
  &lt;span class=&#34;caption-text&#34;&gt;Patch notes in Hipchat&lt;/span&gt;
&lt;/span&gt;


&lt;h3 id=&#34;2-how-does-a-proxy-work:6f44788618f3174bd28bf25248bb8608&#34;&gt;2. How does a Proxy Work?&lt;/h3&gt;

&lt;p&gt;In order to create our own proxy, we must know how proxies work. We have all used Burp before but we don’t really care what happens under the hood until something goes wrong.&lt;/p&gt;

&lt;p&gt;At first look Burp stands between our browser and the server, It receives requests from the browser, relays them to the server and vice versa. But it does a lot more than that. In order to exactly see what happens we need to look at network traffic or in other words &lt;code&gt;pcap or it did not happen&lt;/code&gt;. But capturing this traffic a bit tricky as Hipchat’s traffic to Burp is local so Wireshark/Netmon cannot record it. To demonstrate Burp in action I had three choices:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Use Microsoft Message Analyzer to capture both sides of traffic.

&lt;ul&gt;
&lt;li&gt;Good: Capture everything in one go.&lt;/li&gt;
&lt;li&gt;Evil: Proprietary format that cannot be opened by Wireshark. Readers have to install the tool (and let’s be honest no one looks at these files anyway :D).&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Capture browser’s traffic to Burp via RawCap and Burp’s traffic to the server with Wireshark.

&lt;ul&gt;
&lt;li&gt;Good: We have seen the request and can see them in Burp.&lt;/li&gt;
&lt;li&gt;Evil: Difficult to create. Have to use two applications.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Hook up a mobile device and set Burp as Proxy. The try to view something on the mobile device and capture the traffic on machine running Burp.

&lt;ul&gt;
&lt;li&gt;Good: Very easy to create.&lt;/li&gt;
&lt;li&gt;Evil: Readers cannot relate.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I went with the second option. There was however one problem, the timestamps on packets in Wireshark were exactly 4 hours ahead of RawCap (and we are -4 GMT so you can guess why). Usually this is not a problem in a capture because packet sequences are more important that the exact timestamp (I don&amp;rsquo;t do forensics). I used Wireshark’s timeshift to set them back and then merged both files.&lt;/p&gt;

&lt;p&gt;Now let’s see how Burp works. Let&amp;rsquo;s look at the capture file in Wireshark.&lt;/p&gt;

&lt;h4 id=&#34;2-1-get-http-downloads-hipchat-com-blog-info-html:6f44788618f3174bd28bf25248bb8608&#34;&gt;2.1 GET &lt;a href=&#34;http://downloads.hipchat.com/blog_info.html&#34; target=&#34;_blank&#34;&gt;http://downloads.hipchat.com/blog_info.html&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;&lt;del&gt;Click for full-size image.&lt;/del&gt; Doesn&amp;rsquo;t apply anymore as I don&amp;rsquo;t have imgpopup in Hugo.&lt;/p&gt;









&lt;span class=&#34;caption-wrapper&#34;&gt;
  &lt;img class=&#34;caption&#34; src=&#34;http://parsiya.net/images/2015/hipchat3/03-GET-blog_info-in-Wireshark.png&#34; title=&#34;GET blog_info.html in Wireshark&#34; alt=&#34;GET blog_info.html in Wireshark&#34;&gt;
  &lt;span class=&#34;caption-text&#34;&gt;GET blog_info.html in Wireshark&lt;/span&gt;
&lt;/span&gt;


&lt;p&gt;In other words:&lt;/p&gt;









&lt;span class=&#34;caption-wrapper&#34;&gt;
  &lt;img class=&#34;caption&#34; src=&#34;http://parsiya.net/images/2015/hipchat3/04-GET-blog_info-Sequence-Diagram.png&#34; title=&#34;GET blog_info sequence diagram&#34; alt=&#34;GET blog_info sequence diagram&#34;&gt;
  &lt;span class=&#34;caption-text&#34;&gt;GET blog_info sequence diagram&lt;/span&gt;
&lt;/span&gt;


&lt;p&gt;In other other words:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Hipchat creates a TCP connection to Burp.&lt;/li&gt;
&lt;li&gt;Hipchat sends the GET request to Burp.&lt;/li&gt;
&lt;li&gt;Burp creates a TCP connection to Server.&lt;/li&gt;
&lt;li&gt;Burp sends the GET request to Server.&lt;/li&gt;
&lt;li&gt;Server send the web page to Burp.&lt;/li&gt;
&lt;li&gt;Burp closes the TCP connection to Server.&lt;/li&gt;
&lt;li&gt;Burp sends the web page to Hipchat.&lt;/li&gt;
&lt;li&gt;Burp closes the TCP connection to Hipchat.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Some notes:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;After the TCP handshake, each request will have an ACK.&lt;/li&gt;
&lt;li&gt;Hipchat is initiating to close the TCP connection in both cases.&lt;/li&gt;
&lt;li&gt;Both connection are closed correctly (FIN) instead of RST. FIN means “I am done with the connection but will listen to what you are saying until you confirm it with another FIN” while RST forcibly closes the connection.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;2-2-get-https-s3-amazonaws-com-uploads-hipchat-com-freddie-png:6f44788618f3174bd28bf25248bb8608&#34;&gt;2.2 GET &lt;a href=&#34;https://s3.amazonaws.com/uploads.hipchat.com/…/freddie.png&#34; target=&#34;_blank&#34;&gt;https://s3.amazonaws.com/uploads.hipchat.com/…/freddie.png&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;This one is different because it is over TLS.&lt;/p&gt;









&lt;span class=&#34;caption-wrapper&#34;&gt;
  &lt;img class=&#34;caption&#34; src=&#34;http://parsiya.net/images/2015/hipchat3/05-GET-Freddie-in-Wireshark.png&#34; title=&#34;GET Freddie.png in Wireshark&#34; alt=&#34;GET Freddie.png in Wireshark&#34;&gt;
  &lt;span class=&#34;caption-text&#34;&gt;GET Freddie.png in Wireshark&lt;/span&gt;
&lt;/span&gt;


&lt;p&gt;I am not going to mark the Wireshark screenshot this time. Because the sequence diagram explains everything:&lt;/p&gt;









&lt;span class=&#34;caption-wrapper&#34;&gt;
  &lt;img class=&#34;caption&#34; src=&#34;http://parsiya.net/images/2015/hipchat3/06-GET-Freddie-Sequence-Diagram.png&#34; title=&#34;GET Freddie.png sequence diagram&#34; alt=&#34;GET Freddie.png sequence diagram&#34;&gt;
  &lt;span class=&#34;caption-text&#34;&gt;GET Freddie.png sequence diagram&lt;/span&gt;
&lt;/span&gt;


&lt;p&gt;This is very similar to the previous HTTP request. One difference is that Burp will generate its own certificate (signed by its own root Certificate Authority or root CA) for &lt;code&gt;s3.amazonaws.com&lt;/code&gt; and present it to Hipchat. Hipchat then checks this certificate for validity and if it is signed by a valid root CA. If you have Burp, you have already added Burp’s CA to Windows’ certificate store (right?) so this fake certificate will be valid.&lt;/p&gt;

&lt;h5 id=&#34;2-2-1-what-is-this-connect:6f44788618f3174bd28bf25248bb8608&#34;&gt;2.2.1 What is this CONNECT?&lt;/h5&gt;

&lt;p&gt;We did not see it last time. This is Hipchat’s way of telling the proxy (Burp) about the destination before starting the TLS handshake. In a normal connection everything after the TLS handshake is encrypted (doh) so the proxy does not see anything inside. And lower level data in the packet (e.g. destination IP) do not have this information either because packets are headed for Burp’s IP which is 127.0.0.1 (or IP address of Burp). Before a TLS connection is established Hipchat will do send the &lt;code&gt;CONNECT&lt;/code&gt; request to tell the proxy (in this case Burp) of the destination where the packets should be forwarded.&lt;/p&gt;

&lt;p&gt;Remember that while Burp is a Man-in-the-Middle (MitM) proxy and can decrypt TLS connections, most proxies (especially in corporate environments) are just forwarding proxies so they need this &lt;code&gt;CONNECT&lt;/code&gt; to work properly. For example if we did not have this &lt;code&gt;CONNECT&lt;/code&gt; request, our SSL pass through in part two would have not worked as Burp was not decrypting traffic for that endpoint. Burp is just forwarding whatever it receives to the destination and does not see the content of requests.&lt;/p&gt;

&lt;p&gt;Burp is sending this request because it is proxy-aware as we used its option to designate burp as proxy. For non-proxy-aware clients we have to use another one of Burp’s capabilities.&lt;/p&gt;

&lt;h5 id=&#34;2-2-2-burp-s-invisible-proxying:6f44788618f3174bd28bf25248bb8608&#34;&gt;2.2.2 Burp’s Invisible Proxying&lt;/h5&gt;

&lt;p&gt;In each blog post we are learning a new Burp thing. It seems like we’re becoming quite the Burp expert neh? ;)&lt;/p&gt;

&lt;p&gt;If the client is non-proxy-aware and does not send the &lt;code&gt;CONNECT&lt;/code&gt; before the TLS handshake (because it doesn’t know it is connected to a proxy), Burp needs to know where to send the requests. As Burp is a MitM proxy and is terminating TLS, it can look inside the payloads and determine the destination from the &lt;code&gt;host&lt;/code&gt; header. This is called Burp’s &lt;code&gt;invisible proxying&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It can be enabled at &lt;code&gt;Proxy &amp;gt; Options&lt;/code&gt;. Select the proxy listener, click &lt;code&gt;edit&lt;/code&gt; and under &lt;code&gt;Request Handling&lt;/code&gt; select &lt;code&gt;Support invisible proxying (enable only if needed)&lt;/code&gt;.&lt;/p&gt;









&lt;span class=&#34;caption-wrapper&#34;&gt;
  &lt;img class=&#34;caption&#34; src=&#34;http://parsiya.net/images/2015/hipchat3/07-Burp-invisible-proxy-mode.png&#34; title=&#34;Burp invisible proxying option (enable only if needed!!1!)&#34; alt=&#34;Burp invisible proxying option (enable only if needed!!1!)&#34;&gt;
  &lt;span class=&#34;caption-text&#34;&gt;Burp invisible proxying option (enable only if needed!!1!)&lt;/span&gt;
&lt;/span&gt;


&lt;h3 id=&#34;3-how-does-hipchat-work:6f44788618f3174bd28bf25248bb8608&#34;&gt;3. How does Hipchat Work?&lt;/h3&gt;

&lt;p&gt;Great, now we (hopefully) have a pretty good idea how MItM proxies work. But before developing our own we must observe Hipchat in its natural habitat to cater to its needs. Let&amp;rsquo;s remove the proxy settings from Hipchat, close it and run it again.&lt;/p&gt;









&lt;span class=&#34;caption-wrapper&#34;&gt;
  &lt;img class=&#34;caption&#34; src=&#34;http://parsiya.net/images/2015/hipchat3/08-Hipchat-Normal-Traffic.png&#34; title=&#34;Hipchat normal traffic to the server without Burp&#34; alt=&#34;Hipchat normal traffic to the server without Burp&#34;&gt;
  &lt;span class=&#34;caption-text&#34;&gt;Hipchat normal traffic to the server without Burp&lt;/span&gt;
&lt;/span&gt;


&lt;p&gt;In other words. &lt;del&gt;Click for full-size diagram&lt;/del&gt; (I have redacted the name of the Hipchat server because I am lazy):&lt;/p&gt;









&lt;span class=&#34;caption-wrapper&#34;&gt;
  &lt;img class=&#34;caption&#34; src=&#34;http://parsiya.net/images/2015/hipchat3/09-Hipchat-in-Action.png&#34; title=&#34;Hipchat in action&#34; alt=&#34;Hipchat in action&#34;&gt;
  &lt;span class=&#34;caption-text&#34;&gt;Hipchat in action&lt;/span&gt;
&lt;/span&gt;


&lt;p&gt;In other other words:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;TCP handshake.&lt;/li&gt;
&lt;li&gt;Client starts the XMPP handshake.&lt;/li&gt;
&lt;li&gt;Server responds and indicates that TLS is required.&lt;/li&gt;
&lt;li&gt;Client sends STARTTLS indicating that it is ready to well, start TLS.&lt;/li&gt;
&lt;li&gt;Server responds with PROCEED.&lt;/li&gt;
&lt;li&gt;TLS handshake.&lt;/li&gt;
&lt;li&gt;TLS traffic.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you remember part two where we proxied the traffic through Burp, it would butcher the first XMPP handshake request and then the server would reset the connection. Now that we have seen how Hipchat works we can create our own proxy.&lt;/p&gt;

&lt;h3 id=&#34;4-proxy-design:6f44788618f3174bd28bf25248bb8608&#34;&gt;4. Proxy Design&lt;/h3&gt;

&lt;p&gt;Let’s reiterate what the proxy needs to do:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a TCP socket and start listening on port &lt;code&gt;5222&lt;/code&gt; (Hipchat port). Let’s call it the client socket.&lt;/li&gt;
&lt;li&gt;When a connection is made, read the first part of XMPP handshake from client.&lt;/li&gt;
&lt;li&gt;Create a TCP connection to hipchatserver.com. Let’s call it the server socket.&lt;/li&gt;
&lt;li&gt;Send the message relayed from client to server.&lt;/li&gt;
&lt;li&gt;Read the server’s response (2nd part of XMPP handshake) from server socket and relay it back to client. This will contain the &lt;code&gt;STARTTLS&lt;/code&gt; requirement.&lt;/li&gt;
&lt;li&gt;Read the &lt;code&gt;STARTTLS&lt;/code&gt; message from client (indicating) that it is ready to start doing TLS and send it to server.&lt;/li&gt;
&lt;li&gt;Receive &lt;code&gt;PROCEED&lt;/code&gt; from server and send it to client.&lt;/li&gt;
&lt;li&gt;Convert both client and server connections to TLS.&lt;/li&gt;
&lt;li&gt;Read from client socket, decrypt the message and send it to server via the (now TLS) server socket.&lt;/li&gt;
&lt;li&gt;Read from server socket, decrypt the message and send it to client via client socket.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Seems easy enough right? To be honest it is (you were expecting me to say wrong didn’t you? :D).&lt;/p&gt;

&lt;h4 id=&#34;4-1-tls-certificate-blues:6f44788618f3174bd28bf25248bb8608&#34;&gt;4.1 TLS Certificate Blues&lt;/h4&gt;

&lt;p&gt;We need to create a TLS certificate for &lt;code&gt;hipchatserver.com&lt;/code&gt; to present to Hipchat when we upgrade the connection to TLS. Here’s a catch, you can create a self-signed certificate which means that it is signed by itself. Self-signed certificate is also used in a different situation in the field which means an organization is signing their own certificates. In both cases, it means that the certificate is not valid. Hipchat will freak out if you give it a self-signed certificate signed by itself.&lt;/p&gt;









&lt;span class=&#34;caption-wrapper&#34;&gt;
  &lt;img class=&#34;caption&#34; src=&#34;http://parsiya.net/images/2015/hipchat3/10-self-signed-cert-error-in-hipchat-client.png&#34; title=&#34;Self signed cert error in Hipchat&#34; alt=&#34;Self signed cert error in Hipchat&#34;&gt;
  &lt;span class=&#34;caption-text&#34;&gt;Self signed cert error in Hipchat&lt;/span&gt;
&lt;/span&gt;


&lt;p&gt;Even if you select “I know what I’m doing” and try to proceed, Hipchat will break the connection. So we need to generate our own root CA and sign our certificate with it and finally add this root CA to the list of trusted certificate authorities in Windows certificate store (just like we did with Burp’s CA).&lt;/p&gt;

&lt;h4 id=&#34;4-2-generating-tls-certificates:6f44788618f3174bd28bf25248bb8608&#34;&gt;4.2 Generating TLS Certificates&lt;/h4&gt;

&lt;p&gt;I generated my certificates using &lt;code&gt;OpenSSL&lt;/code&gt; in &lt;code&gt;Cygwin&lt;/code&gt;. First we need to create a pair of RSA keys and then use them to create a root CA.&lt;/p&gt;




    

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;creating our root CA&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt; 
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #586E75&#34;&gt;# Generate a 2048 bit RSA key pair&lt;/span&gt;
openssl genrsa -out rootCA.key 2048

&lt;span style=&#34;color: #586E75&#34;&gt;# Create a rootCA (valid for a year)&lt;/span&gt;
openssl req -x509 -new -nodes -key rootCA.key -days &lt;span style=&#34;color: #2AA198&#34;&gt;365&lt;/span&gt; -out rootCA.crt

&lt;span style=&#34;color: #586E75&#34;&gt;# Generate a 2048 bit RSA key pair&lt;/span&gt;
openssl genrsa -out rootCA.key 2048
 
&lt;span style=&#34;color: #586E75&#34;&gt;# Create a rootCA (valid for a year)&lt;/span&gt;
openssl req -x509 -new -nodes -key rootCA.key -days &lt;span style=&#34;color: #2AA198&#34;&gt;365&lt;/span&gt; -out rootCA.crt
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;


&lt;p&gt;And you will see something similar to this:&lt;/p&gt;




    

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;creating our root CA in Cygwin&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt; 
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;$ openssl genrsa -out rootCA.key 2048
Generating RSA private key, &lt;span style=&#34;color: #2AA198&#34;&gt;2048&lt;/span&gt; bit long modulus
.............................................+++
......+++
e is &lt;span style=&#34;color: #2AA198&#34;&gt;65537&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;(&lt;/span&gt;0x10001&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt;

$ openssl req -x509 -new -nodes -key rootCA.key -days &lt;span style=&#34;color: #2AA198&#34;&gt;365&lt;/span&gt; -out rootCA.crt
$ openssl genrsa -out rootCA.key 2048
Generating RSA private key, &lt;span style=&#34;color: #2AA198&#34;&gt;2048&lt;/span&gt; bit long modulus
.............................................+++
......+++
e is &lt;span style=&#34;color: #2AA198&#34;&gt;65537&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;(&lt;/span&gt;0x10001&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt;
 
$ openssl req -x509 -new -nodes -key rootCA.key -days &lt;span style=&#34;color: #2AA198&#34;&gt;365&lt;/span&gt; -out rootCA.crt
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, the field will be left blank.
-----
Country Name &lt;span style=&#34;color: #719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;2&lt;/span&gt; letter code&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;[&lt;/span&gt;AU&lt;span style=&#34;color: #719e07&#34;&gt;]&lt;/span&gt;:US
State or Province Name &lt;span style=&#34;color: #719e07&#34;&gt;(&lt;/span&gt;full name&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;[&lt;/span&gt;Some-State&lt;span style=&#34;color: #719e07&#34;&gt;]&lt;/span&gt;:
Locality Name &lt;span style=&#34;color: #719e07&#34;&gt;(&lt;/span&gt;eg, city&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt; :
Organization Name &lt;span style=&#34;color: #719e07&#34;&gt;(&lt;/span&gt;eg, company&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;[&lt;/span&gt;Internet Widgits Pty Ltd&lt;span style=&#34;color: #719e07&#34;&gt;]&lt;/span&gt;:
Organizational Unit Name &lt;span style=&#34;color: #719e07&#34;&gt;(&lt;/span&gt;eg, section&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;[]&lt;/span&gt;:
Common Name &lt;span style=&#34;color: #719e07&#34;&gt;(&lt;/span&gt;e.g. server FQDN or YOUR name&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;[]&lt;/span&gt;:
Email Address &lt;span style=&#34;color: #719e07&#34;&gt;[]&lt;/span&gt;:
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;


&lt;p&gt;Now we need to create our certificate for &lt;code&gt;hipchatserver.com&lt;/code&gt; and then sign it.&lt;/p&gt;




    

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;creating the certificate for Hipchat server&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt; 
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;1
2
3
4
5
6
7
8
9&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #586E75&#34;&gt;# First we need to create a key pair for the new certificate&lt;/span&gt;
openssl genrsa -out host.key 2048

&lt;span style=&#34;color: #586E75&#34;&gt;# Then we will use the key pair to generate a Certificate Signing Request or CSR&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# This is what you send to valid certificate authorities to ask them to create &amp;amp; sign a valid certificate for you&lt;/span&gt;
openssl req -new -key host.key -out host.csr

&lt;span style=&#34;color: #586E75&#34;&gt;# Now we can create a valid certificate and sign it with our rootCA&lt;/span&gt;
openssl x509 -req -in host.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out host.crt -days 365
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;





    

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;creating the certificate for Hipchat server in Cygwin&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt; 
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #586E75&#34;&gt;# Key pair generation&lt;/span&gt;
$ openssl genrsa -out host.key 2048
Generating RSA private key, &lt;span style=&#34;color: #2AA198&#34;&gt;2048&lt;/span&gt; bit long modulus
.....................................................................................................................................................................................................................................................+++
.........+++
e is &lt;span style=&#34;color: #2AA198&#34;&gt;65537&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;(&lt;/span&gt;0x10001&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #586E75&#34;&gt;# CSR &lt;/span&gt;
$ openssl req -new -key host.key -out host.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, the field will be left blank.
-----
Country Name &lt;span style=&#34;color: #719e07&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;2&lt;/span&gt; letter code&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;[&lt;/span&gt;AU&lt;span style=&#34;color: #719e07&#34;&gt;]&lt;/span&gt;:US
State or Province Name &lt;span style=&#34;color: #719e07&#34;&gt;(&lt;/span&gt;full name&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;[&lt;/span&gt;Some-State&lt;span style=&#34;color: #719e07&#34;&gt;]&lt;/span&gt;:Virginia
Locality Name &lt;span style=&#34;color: #719e07&#34;&gt;(&lt;/span&gt;eg, city&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;[]&lt;/span&gt;:
Organization Name &lt;span style=&#34;color: #719e07&#34;&gt;(&lt;/span&gt;eg, company&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;[&lt;/span&gt;Internet Widgits Pty Ltd&lt;span style=&#34;color: #719e07&#34;&gt;]&lt;/span&gt;:
Organizational Unit Name &lt;span style=&#34;color: #719e07&#34;&gt;(&lt;/span&gt;eg, section&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;[]&lt;/span&gt;:
Common Name &lt;span style=&#34;color: #719e07&#34;&gt;(&lt;/span&gt;e.g. server FQDN or YOUR name&lt;span style=&#34;color: #719e07&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;[]&lt;/span&gt;:hipchatserver.com
Email Address &lt;span style=&#34;color: #719e07&#34;&gt;[]&lt;/span&gt;:

Please enter the following &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;extra&amp;#39;&lt;/span&gt; attributes
to be sent with your certificate request
A challenge password &lt;span style=&#34;color: #719e07&#34;&gt;[]&lt;/span&gt;:
An optional company name &lt;span style=&#34;color: #719e07&#34;&gt;[]&lt;/span&gt;:

&lt;span style=&#34;color: #586E75&#34;&gt;# TLS certificate creation&lt;/span&gt;
$ openssl x509 -req -in host.csr -CA rootCA.crt -CAkey rootCA.key -CAcreateserial -out host.crt -days 365
Signature ok
&lt;span style=&#34;color: #268BD2&#34;&gt;subject&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;/C&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;US/ST&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;Virginia/O&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;Internet Widgits Pty Ltd/CN&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;hipchatserver.com
Getting CA Private Key

&lt;span style=&#34;color: #586E75&#34;&gt;# This is what we will finally have&lt;/span&gt;
$ ls
host.crt host.csr host.key rootCA.crt rootCA.key rootCA.srl
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;


&lt;p&gt;Notice that I entered &lt;code&gt;hipchatserver.com&lt;/code&gt; for the certificate’s Common Name (CN), this is handy in case the client is checking this field against the server. Obviously you should keep the key files secret.&lt;/p&gt;

&lt;p&gt;This can also be done on the fly in our proxy but I decided to do it outside to keep it simple. A proxy can discover the endpoint via the &lt;code&gt;CONNECT&lt;/code&gt; request and create a certificate for that domain. In a non-proxy aware situation where the &lt;code&gt;CONNECT&lt;/code&gt; is not sent, we either have to tell the proxy to create a proxy for a specific endpoint or just present a certificate with a random CN and hope for the best. In Burp we can specify the endpoint manually and/or tell Burp to create a certificate with a specific CN for each proxy listener.&lt;/p&gt;

&lt;h3 id=&#34;5-redirecting-traffic-from-non-proxy-aware-clients:6f44788618f3174bd28bf25248bb8608&#34;&gt;5. Redirecting Traffic from Non-Proxy-Aware Clients&lt;/h3&gt;

&lt;p&gt;This is another problem. Assuming we are listening on &lt;code&gt;127.0.0.1:5222&lt;/code&gt; how are we going to redirect Hipchat’s traffic to our proxy? We can use Hipchat’s proxy configuration to do this but let’s not use that because I want to talk about redirecting traffic for non-proxy-aware clients.&lt;/p&gt;

&lt;p&gt;We only need traffic to hipchatserver.com all traffic must be redirected to &lt;code&gt;127.0.0.1&lt;/code&gt; or &lt;code&gt;localhost&lt;/code&gt;. On Windows this can be done through the &lt;code&gt;hosts&lt;/code&gt; file. Open your favorite text editor as administrator and open it at the following location:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;%windir&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;\system32\drivers\etc\hosts&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;or&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;c:\windows\system32\drivers\etc\hosts&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Add the following line to the file and save:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;127.0.0.1 hipchatserver.com
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We could also do it with a kernel driver like &lt;code&gt;WinDivert&lt;/code&gt; like we did in &lt;code&gt;[redacted internal proxy tool]&lt;/code&gt;. Although the traffic is redirected, the port does not change so our proxy needs to listen on port &lt;code&gt;5222&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s remove proxy settings from Hipchat and we are good to go.&lt;/p&gt;

&lt;h3 id=&#34;6-hipproxy:6f44788618f3174bd28bf25248bb8608&#34;&gt;6. HipProxy&lt;/h3&gt;

&lt;p&gt;Now let’s look at our proxy code. Comments should give us enough info.&lt;/p&gt;

&lt;p&gt;Remember to copy &lt;code&gt;host.crt&lt;/code&gt; and &lt;code&gt;host.key&lt;/code&gt; into the directory where the Python code is (or modify their paths in the source code):&lt;/p&gt;

&lt;p&gt;


    

&lt;figure class=&#34;code&#34;&gt;
  &lt;figcaption&gt;
  	&lt;span&gt;HipProxy-commented.py&lt;/span&gt;
  &lt;/figcaption&gt;
  &lt;div class=&#34;codewrapper&#34;&gt; 
    &lt;table class=&#34;highlighttable&#34;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&#34;linenodiv&#34; style=&#34;background-color: #f0f0f0; padding-right: 10px&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;  1
  2
  3
  4
  5
  6
  7
  8
  9
 10
 11
 12
 13
 14
 15
 16
 17
 18
 19
 20
 21
 22
 23
 24
 25
 26
 27
 28
 29
 30
 31
 32
 33
 34
 35
 36
 37
 38
 39
 40
 41
 42
 43
 44
 45
 46
 47
 48
 49
 50
 51
 52
 53
 54
 55
 56
 57
 58
 59
 60
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #586E75&#34;&gt;# listen on 127.0.0.1:5222&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;PROXY_HOST&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;PROXY_PORT&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;5222&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# send everything to hipchatserver.com:5222&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;REMOTE_HOST&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;10.11.1.25&amp;quot;&lt;/span&gt;  &lt;span style=&#34;color: #586E75&#34;&gt;# hipchatserver.com&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;REMOTE_PORT&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;5222&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# buffer size in bytes&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# we will need such a large buffer because server will send a lot of data after the connection is established&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;BUF_SIZE&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;8192&lt;/span&gt;
 
&lt;span style=&#34;color: #719e07&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;socket&lt;/span&gt;
&lt;span style=&#34;color: #719e07&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;ssl&lt;/span&gt;
&lt;span style=&#34;color: #719e07&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;binascii&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;hexlify,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;unhexlify&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# create socket 127.0.0.1:5222&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;#  this can&amp;#39;t be non-blocking for obvious reasons&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;listensocket&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;socket(socket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;AF_INET,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;SOCK_STREAM)&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# bind it to 127.0.0.1:5222&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;listensocket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;bind((PROXY_HOST,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;PROXY_PORT))&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;listensocket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;listen(&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;)&lt;/span&gt;  &lt;span style=&#34;color: #586E75&#34;&gt;# 1 for now - you can add more if you want multiple clients but we only need one&lt;/span&gt;
 
&lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;[+] Created socket on %s:%s and listening&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;(PROXY_HOST,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;PROXY_PORT)&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# now accept connections from hipchat client&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;clientsocket,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;clientaddress&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;listensocket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;accept()&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# this should be localhost or 127.0.0.1&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# str is needed because otherwise it cannot be printed properly and we get an errors&lt;/span&gt;
&lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;[+] Accepted connection from %s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #B58900&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;(clientaddress)&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# listen for xmpp_msg1 (first step of XMPP  handshake)&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;xmpp_msg1&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;clientsocket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;recv(BUF_SIZE)&lt;/span&gt;
&lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;[+] Received msg from client:&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;%s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;(xmpp_msg1)&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# create a connection to srver and send it&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;serversocket&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;socket(socket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;AF_INET,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;SOCK_STREAM)&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;serversocket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;connect(&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;(REMOTE_HOST,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;REMOTE_PORT)&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;[+] Connected to server at %s:%s&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;(REMOTE_HOST,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;REMOTE_PORT)&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# send xmpp_msg1&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;serversocket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;sendall(xmpp_msg1)&lt;/span&gt;
&lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;[+] Sending xmpp_msg1 to server&amp;quot;&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# receive xmpp_msg2 from server&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;xmpp_msg2&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;serversocket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;recv(BUF_SIZE)&lt;/span&gt;
&lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;[+] Received msg from server:&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;%s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;(xmpp_msg2)&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# relay it to client&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;clientsocket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;sendall(xmpp_msg2)&lt;/span&gt;
&lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;[+] Send xmpp_msg2 to client&amp;quot;&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# receive xmpp_msg3&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;xmpp_msg3&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;clientsocket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;recv(BUF_SIZE)&lt;/span&gt;
&lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;[+] Received xmpp_msg3 (STARTTLS) from client:&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;%s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;(xmpp_msg3)&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# this should be the STARTTLS one&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# &amp;lt;starttls xmlns=&amp;#39;urn:ietf:params:xml:ns:xmpp-tls&amp;#39;/&amp;gt;&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# relay it to server&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;serversocket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;sendall(xmpp_msg3)&lt;/span&gt;
&lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;[+] Sent xmpp_msg3 (STARTTLS) to server&amp;quot;&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# receive xmpp_msg4 from server&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;xmpp_msg4&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;serversocket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;recv(BUF_SIZE)&lt;/span&gt;
&lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;[+] Received xmpp_msg4 (PROCEED) from server:&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;%s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;%&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;(xmpp_msg4)&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# this should be PROCEED&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# &amp;lt;proceed xmlns=&amp;#39;urn:ietf:params:xml:ns:xmpp-tls&amp;#39;/&amp;gt;&lt;/span&gt;
 
&lt;span style=&#34;color: #719e07&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;proceed&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;xmpp_msg4:&lt;/span&gt;
    &lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt; [+] Something went wrong, server did not respond with proceed&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #B58900&#34;&gt;exit&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;()&lt;/span&gt;
 
&lt;span style=&#34;color: #719e07&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #93A1A1&#34;&gt;clientsocket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;sendall(xmpp_msg4)&lt;/span&gt;
    &lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;[+] Sending xmpp_msg4 (PROCEED) to client&amp;quot;&lt;/span&gt;
 
&lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;[+] Going TLS&amp;quot;&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# now we must wrap our sockets in TLS&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# fortunately this is very easy in Python&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# converting clientsocket to TLS&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# modify the path host.crt and host.key (if they are not in the same directory)&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;tlsclient&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;ssl&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;wrap_socket(clientsocket,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;keyfile&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;host.key&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;certfile&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;host.crt&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;server_side&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;cert_reqs&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;ssl&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;CERT_NONE)&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# set it to non-blocking&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;tlsclient&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;setblocking(&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;)&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# set timeout to 0.5 sec&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;tlsclient&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;settimeout(&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;0.5&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;)&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# ssl.CERT_NONE == cert is not required and will not be validated if provided&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# this is not generally safe but we know the endpoint in this scenario&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# this means, don&amp;#39;t care if hipchatserver.com responds with a crappy certificate&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;tlsserver&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;ssl&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;wrap_socket(serversocket,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;server_side&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;False&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;cert_reqs&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;ssl&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;CERT_NONE)&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;tlsserver&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;setblocking(&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;tlsserver&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;settimeout(&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;0.5&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;)&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# SSL added and removed here :^)&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# 2meta4me&lt;/span&gt;
 
&lt;span style=&#34;color: #586E75&#34;&gt;# now we are going to juggle connections&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# listen on one for half a second and send on the other one then vice versa&lt;/span&gt;
 
&lt;span style=&#34;color: #719e07&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #719e07&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #586E75&#34;&gt;# receive on client-side&lt;/span&gt;
        &lt;span style=&#34;color: #93A1A1&#34;&gt;msg_from_client&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;tlsclient&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;recv(BUF_SIZE)&lt;/span&gt;
        &lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;[+] Received from client:&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;%s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #B58900&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;(msg_from_client)&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;)&lt;/span&gt;
 
        &lt;span style=&#34;color: #93A1A1&#34;&gt;tlsserver&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;sendall(msg_from_client)&lt;/span&gt;
 
	&lt;span style=&#34;color: #586E75&#34;&gt;# sockets are non-blocking which means that they will timeout&lt;/span&gt;
	&lt;span style=&#34;color: #586E75&#34;&gt;# here we check if they actually timedout&lt;/span&gt;
    &lt;span style=&#34;color: #719e07&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;socket_exception:&lt;/span&gt;
        &lt;span style=&#34;color: #719e07&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;timed out&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #B58900&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;(socket_exception):&lt;/span&gt;
            &lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;[+] Error receiving data from client&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;%s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #B58900&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;(socket_exception)&lt;/span&gt;
 
    &lt;span style=&#34;color: #719e07&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #93A1A1&#34;&gt;msg_from_server&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;tlsserver&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;recv(BUF_SIZE)&lt;/span&gt;
        &lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;[+] Received from server:&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;%s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #B58900&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;(msg_from_server)&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;)&lt;/span&gt;
		
        &lt;span style=&#34;color: #93A1A1&#34;&gt;tlsclient&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;sendall(msg_from_server)&lt;/span&gt;
 
    &lt;span style=&#34;color: #719e07&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;socket&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;error&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;socket_exception:&lt;/span&gt;
         &lt;span style=&#34;color: #719e07&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;timed out&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #B58900&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;(socket_exception):&lt;/span&gt;
            &lt;span style=&#34;color: #719e07&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;[+] Error receiving data from server&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;%s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #B58900&#34;&gt;str&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;(socket_exception)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;







&lt;span class=&#34;caption-wrapper&#34;&gt;
  &lt;img class=&#34;caption&#34; src=&#34;http://parsiya.net/images/2015/hipchat3/11-It-works.png&#34; title=&#34;And it works&#34; alt=&#34;And it works&#34;&gt;
  &lt;span class=&#34;caption-text&#34;&gt;And it works&lt;/span&gt;
&lt;/span&gt;
&lt;/p&gt;

&lt;p&gt;If you run the proxy, you will see that after the connection is made, server starts sending the whole address book and any messages in all available chatrooms (even if you are not logged into them), after the initial barrage of data from the server, the rest will be mild unless you are in very crowded chatrooms.&lt;/p&gt;

&lt;p&gt;The proxy is also slow as it is printing everything to console, I have a different version of it that dumps the traffic to text files named &lt;code&gt;HipProxy-filedump.py&lt;/code&gt;. This is a lot faster and allows us to look at the traffic offline. There will be three (almost) text files &lt;code&gt;everything.dump&lt;/code&gt;, &lt;code&gt;fromclient.dump&lt;/code&gt; and &lt;code&gt;fromserver.dump&lt;/code&gt;.&lt;/p&gt;

&lt;h4 id=&#34;6-1-connection-juggling:6f44788618f3174bd28bf25248bb8608&#34;&gt;6.1 Connection Juggling&lt;/h4&gt;

&lt;p&gt;As you saw, I juggled the TLS connections. After both TCP connections were converted to TLS (did you see how easy it was to do it in Python?) both client and server sockets were converted to non-blocking and their timeouts set to 0.5 seconds. At any given time, one socket is receiving and the other is sending. Each socket will send/receive for half a second before timing out and raising an exception (because they non-blocking). Then I caught these exceptions and checked if the exception text contained “timed out.” If this occurs we have not encountered any problems and keep juggling. This method not optimal but is a pretty simple concept and works. We are not transferring large chunks of data and only have two connections.&lt;/p&gt;

&lt;h4 id=&#34;6-2-notes-about-the-python-code:6f44788618f3174bd28bf25248bb8608&#34;&gt;6.2 Notes about the Python Code&lt;/h4&gt;

&lt;p&gt;It was really easy, it took me more time to write the blogs (creating good capture files to explain how Burp works took a long time) than to actually do the technical part. Without comments the proxy is less than 50 lines in Python (43 lines to be exact including the file logging lines) so now you know why we use scripting languages. I assume it is going to be as easy in Ruby and whatever Perl is :).&lt;/p&gt;

&lt;p&gt;You could say this is not good Python code, fortunately I am not a dev. It does not check for errors, it is not modular and does not work for other programs. But it works for Hipchat and does the job. My main objective was to write to show and explain how a MitM proxy works. With a few hacky modifications you can even inject traffic (I will do it one day).&lt;/p&gt;

&lt;h3 id=&#34;7-some-interesting-items:6f44788618f3174bd28bf25248bb8608&#34;&gt;7. Some Interesting Items&lt;/h3&gt;

&lt;p&gt;I will probably revisit the proxy later and start analyzing Hipchat’s traffic (which is basically XMPP) and modify the proxy to inject traffic. Here are some interesting things that I noted in my cursory look:&lt;/p&gt;

&lt;h4 id=&#34;7-1-auth:6f44788618f3174bd28bf25248bb8608&#34;&gt;7.1 Auth&lt;/h4&gt;

&lt;p&gt;Open the file fromclient.dump and look at the data sent by the client. The second message is the auth message and is in the following form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;&amp;lt;auth&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;http://hipchat.com&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;&amp;gt;&lt;/span&gt;some base64 data&lt;span style=&#34;color: #268BD2&#34;&gt;&amp;lt;/auth&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you decode this base64 blob you can see the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;0x00username0x00Password0x00windows
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;7-2-ian-ate-the-hash:6f44788618f3174bd28bf25248bb8608&#34;&gt;7.2 Ian Ate the Hash&lt;/h4&gt;

&lt;p&gt;XMPP supports using hash functions for integrity checks but in Hipchat we see the value of hash function is set to &lt;code&gt;IANWASHERE&lt;/code&gt;. In a normal XMPP message, it contains the name of a hash function and there is a base64 encoded hash (of something):&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;# Hipchat message
&lt;span style=&#34;color: #268BD2&#34;&gt;&amp;lt;presence&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #268BD2&#34;&gt;&amp;lt;c&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;http://jabber.org/protocol/caps&amp;quot;&lt;/span&gt;
     &lt;span style=&#34;color: #93A1A1&#34;&gt;hash=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;IANWASHERE&amp;quot;&lt;/span&gt;
     &lt;span style=&#34;color: #93A1A1&#34;&gt;node=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;http://hipchat.com/client/qt/windows&amp;quot;&lt;/span&gt;
     &lt;span style=&#34;color: #93A1A1&#34;&gt;ver=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;2.2.1395&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;os_ver=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;Windows 7&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #268BD2&#34;&gt;&amp;lt;/presence&amp;gt;&lt;/span&gt;

# normal XMPP message
&lt;span style=&#34;color: #268BD2&#34;&gt;&amp;lt;presence&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;from=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;romeo@montague.lit/orchard&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #268BD2&#34;&gt;&amp;lt;c&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;xmlns=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;http://jabber.org/protocol/caps&amp;#39;&lt;/span&gt; 
     &lt;span style=&#34;color: #93A1A1&#34;&gt;hash=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;sha-1&amp;#39;&lt;/span&gt;
     &lt;span style=&#34;color: #93A1A1&#34;&gt;node=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;http://code.google.com/p/exodus&amp;#39;&lt;/span&gt;
     &lt;span style=&#34;color: #93A1A1&#34;&gt;ver=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;QgayPKawpkPSDYmwT/WM94uAlu0=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #268BD2&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #268BD2&#34;&gt;&amp;lt;/presence&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;7-3-server-s-data-dump-at-startup:6f44788618f3174bd28bf25248bb8608&#34;&gt;7.3 Server’s Data Dump at Startup&lt;/h4&gt;

&lt;p&gt;If you look at the data coming from server, you can see that the server sends the address book (everyone’s information) after establishing the connection. We can also see all messages in all accessible chatrooms being downloaded (although I was not logged into any chatroom) perhaps for caching purposes. This is why the connection is so slow at start but stabilizes after a while.&lt;/p&gt;

&lt;h4 id=&#34;7-4-cleaning-up:6f44788618f3174bd28bf25248bb8608&#34;&gt;7.4 Cleaning Up&lt;/h4&gt;

&lt;p&gt;Remember to delete the data dumps as they contain your username and password in plaintext. Also remember to remove the root certificate from Windows’ certificate store.&lt;/p&gt;

&lt;p&gt;Ok, that was all folks. I hope this is useful, I mean it is. Sooner or later you have to write your own proxy. As usual if you have any complaints, you know where to find me, feedback is always welcome.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Malware Adventure</title>
      <link>http://parsiya.net/blog/2014-09-21-malware-adventure/</link>
      <pubDate>Sun, 21 Sep 2014 19:11:43 +0000</pubDate>
      
      <guid>http://parsiya.net/blog/2014-09-21-malware-adventure/</guid>
      <description>&lt;p&gt;I finally caved in and started to push some of my code to &lt;del&gt;github&lt;/del&gt; bitbucket. It is located at &lt;a href=&#34;https://bitbucket.org/parsiya&#34; target=&#34;_blank&#34;&gt;https://bitbucket.org/parsiya&lt;/a&gt; and is almost empty ;).&lt;/p&gt;

&lt;p&gt;This is Malware Adventure. It&amp;rsquo;s a small adventure game I wrote using PAWS. PAWS is Pyhton Adventure Writing System by Roger Plowman. Get it from &lt;a href=&#34;http://home.fuse.net/wolfonenet/PAWS.htm&#34; target=&#34;_blank&#34;&gt;http://home.fuse.net/wolfonenet/PAWS.htm&lt;/a&gt;. It&amp;rsquo;s great.&lt;/p&gt;

&lt;p&gt;The game itself is a Python program. You define objects which can be be rooms, items etc. You can read more about it in the readme file at &lt;a href=&#34;https://bitbucket.org/parsiya/MalwareAdventure&#34; target=&#34;_blank&#34;&gt;https://bitbucket.org/parsiya/MalwareAdventure&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;PS: Yes, I should be working on the Flare-On challenge writeup. It needs more time because I am not only documenting my solution but what other stuff I did. I think failed attempts are as important as the solution in challenge writeups.&lt;/p&gt;

&lt;p&gt;PPS: Changed links to &lt;code&gt;bitbucket&lt;/code&gt; as I stopped using github.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Pasting Shellcode in GDB using Python</title>
      <link>http://parsiya.net/blog/2014-05-25-pasting-shellcode-in-gdb-using-python/</link>
      <pubDate>Sun, 25 May 2014 18:39:58 +0000</pubDate>
      
      <guid>http://parsiya.net/blog/2014-05-25-pasting-shellcode-in-gdb-using-python/</guid>
      <description>&lt;p&gt;A few days ago I was trying to write an exploit for a buffer overflow with GDB. This was a console application and pasting shellcode would mess with it.&lt;/p&gt;

&lt;p&gt;There are a few options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing shellcode to a file and then using it as input for GDB.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #586E75&#34;&gt;# you can also include GDB commands like setting up breakpoints (e.g. b * 0xDEADBEEF)&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# remember to include a new line after each command&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;python&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;c&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;print &amp;quot;b * 0xDEADBEEF&amp;quot; + &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot; + &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\x41&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;*1000 + &amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #B58900&#34;&gt;input&lt;/span&gt;

&lt;span style=&#34;color: #586E75&#34;&gt;# $ perl -e for perl&lt;/span&gt;

&lt;span style=&#34;color: #586E75&#34;&gt;# start debugging with GDB&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# -q (quiet mode): no text at startup&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;gdb&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;executable1&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;q&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;(gdb)&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;run&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #B58900&#34;&gt;input&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After this you can manually debug in GDB.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Writing a Python script for interactive debugging
When I wrote this, I thought it was a clever idea but then someone told me I could have written a GDB script. However, I have already written this snippet so here it goes.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #586E75&#34;&gt;#!/usr/bin/python&lt;/span&gt;

&lt;span style=&#34;color: #719e07&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;subprocess&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;Popen&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;PIPE&lt;/span&gt;
&lt;span style=&#34;color: #719e07&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;sleep&lt;/span&gt;

&lt;span style=&#34;color: #586E75&#34;&gt;# shellcode&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;shellcode&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\x41&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;1000&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;

&lt;span style=&#34;color: #586E75&#34;&gt;# opens gdb with parameter executable&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# you can also manage stdout and stderr here&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;proc&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;Popen(&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;gdb&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;executable&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;bufsize&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;,stdin&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;PIPE&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #586E75&#34;&gt;# sample breakpoint&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# notice the new line after each command&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;b *DEADBEEF&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #586E75&#34;&gt;# half a second of sleep after each command&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;sleep(&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;0.5&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #586E75&#34;&gt;# r or run to start debugging the program with GDB&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;r&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;sleep(&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;0.5&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #586E75&#34;&gt;# any other commands go here&lt;/span&gt;

&lt;span style=&#34;color: #586E75&#34;&gt;# this is a loop, will get every command and pass it to GDB&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# &amp;quot;leave&amp;quot; == quit GDB and terminate process&lt;/span&gt;
&lt;span style=&#34;color: #586E75&#34;&gt;# &amp;quot;dump&amp;quot;  == paste shellcode&lt;/span&gt;
&lt;span style=&#34;color: #719e07&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #268BD2&#34;&gt;True&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #93A1A1&#34;&gt;mycommand&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #B58900&#34;&gt;raw_input&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color: #719e07&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;(mycommand&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;leave&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;):&lt;/span&gt;
        &lt;span style=&#34;color: #586E75&#34;&gt;# quit gdb&lt;/span&gt;
        &lt;span style=&#34;color: #93A1A1&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;write(&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;quit&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #719e07&#34;&gt;break&lt;/span&gt;
    
    &lt;span style=&#34;color: #586E75&#34;&gt;# paste shellcode&lt;/span&gt;
    &lt;span style=&#34;color: #719e07&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;(mycommand&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;dump&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;):&lt;/span&gt;
        &lt;span style=&#34;color: #93A1A1&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;write(shellcode)&lt;/span&gt;
    &lt;span style=&#34;color: #586E75&#34;&gt;# more custom commands go here&lt;/span&gt;

    &lt;span style=&#34;color: #586E75&#34;&gt;# not a custom command? send it as-is&lt;/span&gt;
    &lt;span style=&#34;color: #719e07&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #93A1A1&#34;&gt;mycommand&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;mycommand&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;&lt;/span&gt; 
        &lt;span style=&#34;color: #93A1A1&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;write(mycommand)&lt;/span&gt;
        &lt;span style=&#34;color: #93A1A1&#34;&gt;sleep(&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;0.5&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #586E75&#34;&gt;# close our pipe    &lt;/span&gt;
&lt;span style=&#34;color: #93A1A1&#34;&gt;proc&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;stdin&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;close()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I think that this code can be modified and become a very simple fuzzer. We have control over stdin and can read stdout and stderr. Change input, record output, rinse and repeat.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;subprocess&lt;/code&gt; is a very powerful module. For example to normally run an application with an argument we can write &lt;code&gt;subprocess.call([&#39;gdb&#39;,&#39;executable&#39;]) .&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;but let&amp;rsquo;s say we want to run executable with input (containing shellcode):&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #002B36&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #719e07&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;subprocess&lt;/span&gt;

&lt;span style=&#34;color: #93A1A1&#34;&gt;shellcode&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #CB4B16&#34;&gt;\x41&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #719e07&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;100&lt;/span&gt;

&lt;span style=&#34;color: #93A1A1&#34;&gt;subprocess&lt;/span&gt;&lt;span style=&#34;color: #719e07&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;call(&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;gdb&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #2AA198&#34;&gt;&amp;#39;executable&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #93A1A1&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #93A1A1&#34;&gt;shellcode)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>